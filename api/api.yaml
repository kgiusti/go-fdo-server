openapi: 3.1.0
info:
  title: FDO Server API
  description: |
    This describes the current API of the Golang-based FDO server
  version: 1.0.0
paths:
  /api/v1/rvinfo:
    get:
      summary: Get Rendezvous Information
      operationId: getRvInfo
      responses:
        '200':
          description: Successful response with Rendezvous Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RvInfo'
        '404':
          description: No Rendezvous Information found
        '500':
          description: Internal server error
    post:
      summary: Create Rendezvous Information
      operationId: createRvInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RvInfo'
          text/plain:
            schema:
              type: string
              format: byte # Assuming text/plain is used for raw bytes which decode to JSON
      responses:
        '201':
          description: Rendezvous Information created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RvInfo'
        '400':
          description: Invalid input
        '409':
          description: Rendezvous Information already exists
        '500':
          description: Internal server error
    put:
      summary: Update Rendezvous Information
      operationId: updateRvInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RvInfo'
          text/plain:
            schema:
              type: string
              format: byte # Assuming text/plain is used for raw bytes which decode to JSON
      responses:
        '200':
          description: Rendezvous Information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RvInfo'
        '400':
          description: Invalid input
        '404':
          description: No Rendezvous Information found
        '500':
          description: Internal server error

  /api/v1/owner/redirect:
    get:
      summary: Get Owner Information
      operationId: getOwnerInfo
      responses:
        '200':
          description: Successful response with Owner Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerInfo'
        '404':
          description: No Owner Information found
        '500':
          description: Internal server error
    post:
      summary: Create Owner Information
      operationId: createOwnerInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerInfo'
          text/plain:
            schema:
              type: string
              format: byte # Assuming text/plain is used for raw bytes which decode to JSON
      responses:
        '201':
          description: Owner Information created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerInfo'
        '400':
          description: Invalid input
        '409':
          description: Owner Information already exists
        '500':
          description: Internal server error
    put:
      summary: Update Owner Information
      operationId: updateOwnerInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerInfo'
          text/plain:
            schema:
              type: string
              format: byte # Assuming text/plain is used for raw bytes which decode to JSON
      responses:
        '200':
          description: Owner Information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerInfo'
        '400':
          description: Invalid input
        '404':
          description: No Owner Information found
        '500':
          description: Internal server error

  /api/v1/to0/{guid}:
    post:
      summary: Register RV Blob for Device
      operationId: registerRvBlob
      parameters:
        - name: guid
          in: path
          required: true
          description: The GUID of the device to register the RV blob for.
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{32}$' # Assuming the GUID is a 32-character hex string
      responses:
        '200':
          description: RV Blob registered successfully
          content:
            text/plain:
              schema:
                type: string
                description: The GUID of the registered device
        '400':
          description: Invalid GUID
        '500':
          description: Internal server error

  /api/v1/vouchers:
    get:
      summary: Get Voucher by GUID
      operationId: getVoucherByGuid
      parameters:
        - name: guid
          in: query
          required: true
          description: The GUID of the voucher to retrieve (hexadecimal string).
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{32}$' # Assuming the GUID is a 32-character hex string
      responses:
        '200':
          description: Successful response with Voucher and Owner Keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  voucher:
                    $ref: '#/components/schemas/Voucher'
                  owner_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/OwnerKey'
        '400':
          description: Invalid GUID or missing GUID parameter
        '404':
          description: Voucher not found
        '500':
          description: Internal server error

  /api/v1/owner/vouchers:
    post:
      summary: Insert Voucher and Update Owner Keys
      operationId: insertVoucherAndUpdateOwnerKeys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                voucher:
                  $ref: '#/components/schemas/Voucher'
                owner_keys:
                  type: array
                  items:
                    $ref: '#/components/schemas/OwnerKey'
      responses:
        '200':
          description: Voucher inserted and Owner Keys updated successfully
          content:
            text/plain:
              schema:
                type: string
                description: The GUID of the inserted voucher (hexadecimal string).
        '400':
          description: Invalid request payload
        '500':
          description: Internal server error

  /health:
    get:
      summary: Get Health Status
      operationId: getHealthStatus
      responses:
        '200':
          description: Successful response with health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '405':
          description: Method not allowed

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        version:
          type: string
          description: The version of the application.
        status:
          type: string
          description: The health status of the application (e.g., "OK").
    RvInfo:
      type: object
      properties:
        Value:
          type: array
          items:
            type: array
            items:
              oneOf:
                - type: integer
                  description: Represents a protocol.RvVar
                - type: string
                - type: number
                - type: boolean
                - type: object
                  additionalProperties: {}
                - type: array
                  items: {}
      description: Represents the Rendezvous Information structure
    OwnerInfo:
      type: object
      properties:
        Value:
          type: array
          items:
            type: array
            items:
              oneOf:
                - type: string
                  nullable: true
                  description: IP Address or null
                - type: string
                  nullable: true
                  description: DNS Address or null
                - type: number
                  description: Port number
                - type: number
                  description: Transport Protocol (integer representing protocol.TransportProtocol)
      description: Represents the Owner Information structure (list of RvTO2Addr)
    Voucher:
      type: object
      properties:
        guid:
          type: string
          format: byte # Assuming GUID is stored as bytes
          description: The GUID of the voucher.
        cbor:
          type: string
          format: byte # Assuming CBOR data is stored as bytes
          description: The CBOR encoded voucher data.
    OwnerKey:
      type: object
      properties:
        type:
          type: integer
          description: The type of the owner key.
        pkcs8:
          type: string
          format: byte # Assuming PKCS8 data is stored as bytes
          description: The PKCS8 encoded private key.
        x509_chain:
          type: string
          format: byte # Assuming X.509 chain data is stored as bytes
          description: The X.509 certificate chain.
